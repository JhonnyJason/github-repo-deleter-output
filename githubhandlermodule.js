// Generated by CoffeeScript 2.4.1
(function() {
  var CLI, OctokitREST, Spinner, authQuestions, buildOctokit, c, githubhandlermodule, inquirer, log, octokit, password, twoFactorAuthentification, username;

  githubhandlermodule = {
    name: "githubhandlermodule"
  };

  OctokitREST = require("@octokit/rest");

  inquirer = require("inquirer");

  c = require('chalk');

  CLI = require('clui');

  Spinner = CLI.Spinner;

  //log Switch
  log = function(arg) {
    if (allModules.debugmodule.modulesToDebug["githubhandlermodule"] != null) {
      console.log("[githubhandlermodule]: " + arg);
    }
  };

  //region internal variables
  octokit = null;

  username = "";

  password = "";

  authQuestions = [
    {
      name: "username",
      type: "input",
      message: "Github username:",
      validate: function(value) {
        if (value.length) {
          return true;
        } else {
          return 'Please!';
        }
      }
    },
    {
      name: "password",
      type: "password",
      message: "Github password:",
      validate: function(value) {
        if (value.length) {
          return true;
        } else {
          return 'Please!';
        }
      }
    }
  ];

  twoFactorAuthentification = [
    {
      name: "twoFactorAuthenticationCode",
      type: "input",
      message: "2fa Code:",
      validate: function(value) {
        if (value.length) {
          return true;
        } else {
          return 'Please!';
        }
      }
    }
  ];

  //endregion

  //region exposed variables
  //endregion

  //#initialization function  -> is automatically being called!  ONLY RELY ON DOM AND VARIABLES!! NO PLUGINS NO OHTER INITIALIZATIONS!!
  githubhandlermodule.initialize = function() {
    return log("githubhandlermodule.initialize");
  };

  
  //region internal functions
  buildOctokit = async function() {
    var answers, authenticated, err, info, options, results1, status;
    authenticated = false;
    results1 = [];
    while (!authenticated) {
      answers = (await inquirer.prompt(authQuestions));
      status = new Spinner('Checking credentials...');
      options = {
        auth: {
          username: answers.username,
          password: answers.password,
          on2fa: async function() {
            var answer;
            status.stop();
            answer = (await inquirer.prompt(twoFactorAuthentification));
            status.start();
            return answer.twoFactorAuthenticationCode;
          }
        },
        userAgent: "github-repo-deleter v0.1.0",
        baseUrl: "https://api.github.com"
      };
      octokit = new OctokitREST(options);
      try {
        status.start();
        info = (await octokit.users.getAuthenticated());
        console.log(c.green("Credentials Check succeeded!"));
        username = answers.username;
        password = answers.password;
        results1.push(authenticated = true);
      } catch (error) {
        err = error;
        results1.push(console.log(c.red("Credentials Check failed!")));
      } finally {
        status.stop();
      }
    }
    return results1;
  };

  //endregion

  //region exposed functions
  githubhandlermodule.buildConnection = async function() {
    if (octokit === null) {
      return (await buildOctokit());
    }
  };

  githubhandlermodule.retrieveAllUserRepositories = async function() {
    var answer, data, keys, names, options, repo, results;
    log("githubhandlermodule.retrieveAllUserRepositories");
    // TODO implement
    options = {
      visibility: "all",
      affiliation: "owner",
      sort: "updated",
      per_page: 100,
      direction: "asc",
      page: 0
    };
    results = [];
    while (true) {
      answer = (await octokit.repos.list(options));
      //else return resultskeys = Object.keys(answer)
      keys = Object.keys(answer);
      data = answer.data;
      names = (function() {
        var i, len, results1;
        results1 = [];
        for (i = 0, len = data.length; i < len; i++) {
          repo = data[i];
          results1.push(repo.name);
        }
        return results1;
      })();
      options.page++;
      if (names.length) {
        results = results.concat(names);
      } else {
        return results;
      }
    }
  };

  githubhandlermodule.deleteUserRepository = async function(repo) {
    var result;
    if (octokit === null) {
      await buildOctokit();
    }
    result = (await octokit.repos.delete({
      owner: username,
      repo: repo
    }));
  };

  //console.log(result)
  githubhandlermodule.deleteReposForUser = async function(repos) {
    var promises, repo, status;
    log("githubhandlermodule.deleteAllRepos");
    status = new Spinner('Deleting the repositories...');
    try {
      status.start();
      promises = (function() {
        var i, len, results1;
        results1 = [];
        for (i = 0, len = repos.length; i < len; i++) {
          repo = repos[i];
          results1.push(githubhandlermodule.deleteUserRepository(repo));
        }
        return results1;
      })();
      await Promise.all(promises);
    } finally {
      status.stop();
    }
  };

  //endregion
  module.exports = githubhandlermodule;

}).call(this);
